package leetcode.old;

/**
 * @Author: tianbin9611
 * @Date: 2020/9/25 15:16
 * @Description: 191. 位1的个数
 * 编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 * 示例 2：
 * <p>
 * 输入：00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
 * 示例 3：
 * <p>
 * 输入：11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 */
public class T191 {

    public static void main(String[] args) {
        System.out.println(hammingWeight2(3));
    }

    /**
     * 1. 循环除以2 取余数
     * 2. 位运行 与 &  循环与32个位置上的1 进行与操作 不等于0 说明那个位置有1    0001&0001 = 0001
     *
     * @param n
     * @return
     */
    public static int hammingWeight(int n) {
        int bits = 0;
        int mask = 1;
        for (int i = 0; i < 32; i++) {
            if ((n & mask) != 0) {
                bits++;
            }
            //左移
            mask <<= 1;
        }
        return bits;
    }

    /**
     * 3。位运算  不断减一， 当n &（n-1）=0时，说明n已经没有1了
     * 1）00010011 &  00010010   =00010010
     * 2）00010010 &  00010001   =00010000
     * 3）00010000 &  00001111   =00000000   （结果为3）
     *
     * @param n
     * @return
     */
    public  static int hammingWeight2(int n) {
        int sum = 0;
        while (n != 0) {
            sum++;
            n = n & (n - 1);
        }
        return sum;
    }
}

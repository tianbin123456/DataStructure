//Áªô‰Ω†‰∏Ä‰∏™Áî®Â≠óÁ¨¶Êï∞ÁªÑ tasks Ë°®Á§∫ÁöÑ CPU ÈúÄË¶ÅÊâßË°åÁöÑ‰ªªÂä°ÂàóË°®„ÄÇÂÖ∂‰∏≠ÊØè‰∏™Â≠óÊØçË°®Á§∫‰∏ÄÁßç‰∏çÂêåÁßçÁ±ªÁöÑ‰ªªÂä°„ÄÇ‰ªªÂä°ÂèØ‰ª•‰ª•‰ªªÊÑèÈ°∫Â∫èÊâßË°åÔºåÂπ∂‰∏îÊØè‰∏™‰ªªÂä°ÈÉΩÂèØ‰ª•Âú® 1 ‰∏™
//Âçï‰ΩçÊó∂Èó¥ÂÜÖÊâßË°åÂÆå„ÄÇÂú®‰ªª‰Ωï‰∏Ä‰∏™Âçï‰ΩçÊó∂Èó¥ÔºåCPU ÂèØ‰ª•ÂÆåÊàê‰∏Ä‰∏™‰ªªÂä°ÔºåÊàñËÄÖÂ§Ñ‰∫éÂæÖÂëΩÁä∂ÊÄÅ„ÄÇ 
//
// ÁÑ∂ËÄåÔºå‰∏§‰∏™ Áõ∏ÂêåÁßçÁ±ª ÁöÑ‰ªªÂä°‰πãÈó¥ÂøÖÈ°ªÊúâÈïøÂ∫¶‰∏∫Êï¥Êï∞ n ÁöÑÂÜ∑Âç¥Êó∂Èó¥ÔºåÂõ†Ê≠§Ëá≥Â∞ëÊúâËøûÁª≠ n ‰∏™Âçï‰ΩçÊó∂Èó¥ÂÜÖ CPU Âú®ÊâßË°å‰∏çÂêåÁöÑ‰ªªÂä°ÔºåÊàñËÄÖÂú®ÂæÖÂëΩÁä∂ÊÄÅ„ÄÇ 
//
// ‰Ω†ÈúÄË¶ÅËÆ°ÁÆóÂÆåÊàêÊâÄÊúâ‰ªªÂä°ÊâÄÈúÄË¶ÅÁöÑ ÊúÄÁü≠Êó∂Èó¥ „ÄÇ 
//
// 
//
// Á§∫‰æã 1Ôºö 
//
// 
//ËæìÂÖ•Ôºötasks = ["A","A","A","B","B","B"], n = 2
//ËæìÂá∫Ôºö8
//Ëß£ÈáäÔºöA -> B -> (ÂæÖÂëΩ) -> A -> B -> (ÂæÖÂëΩ) -> A -> B
//     Âú®Êú¨Á§∫‰æã‰∏≠Ôºå‰∏§‰∏™Áõ∏ÂêåÁ±ªÂûã‰ªªÂä°‰πãÈó¥ÂøÖÈ°ªÈó¥ÈöîÈïøÂ∫¶‰∏∫ n = 2 ÁöÑÂÜ∑Âç¥Êó∂Èó¥ÔºåËÄåÊâßË°å‰∏Ä‰∏™‰ªªÂä°Âè™ÈúÄË¶Å‰∏Ä‰∏™Âçï‰ΩçÊó∂Èó¥ÔºåÊâÄ‰ª•‰∏≠Èó¥Âá∫Áé∞‰∫ÜÔºàÂæÖÂëΩÔºâÁä∂ÊÄÅ„ÄÇ 
//
// Á§∫‰æã 2Ôºö 
//
// 
//ËæìÂÖ•Ôºötasks = ["A","A","A","B","B","B"], n = 0
//ËæìÂá∫Ôºö6
//Ëß£ÈáäÔºöÂú®ËøôÁßçÊÉÖÂÜµ‰∏ãÔºå‰ªª‰ΩïÂ§ßÂ∞è‰∏∫ 6 ÁöÑÊéíÂàóÈÉΩÂèØ‰ª•Êª°Ë∂≥Ë¶ÅÊ±ÇÔºåÂõ†‰∏∫ n = 0
//["A","A","A","B","B","B"]
//["A","B","A","B","A","B"]
//["B","B","B","A","A","A"]
//...
//ËØ∏Â¶ÇÊ≠§Á±ª
// 
//
// Á§∫‰æã 3Ôºö 
//
// 
//ËæìÂÖ•Ôºötasks = ["A","A","A","A","A","A","B","C","D","E","F","G"], n = 2
//ËæìÂá∫Ôºö16
//Ëß£ÈáäÔºö‰∏ÄÁßçÂèØËÉΩÁöÑËß£ÂÜ≥ÊñπÊ°àÊòØÔºö
//     A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> (ÂæÖÂëΩ) -> (ÂæÖÂëΩ) -> A -> (ÂæÖ
//ÂëΩ) -> (ÂæÖÂëΩ) -> A
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// 1 <= task.length <= 104 
// tasks[i] ÊòØÂ§ßÂÜôËã±ÊñáÂ≠óÊØç 
// n ÁöÑÂèñÂÄºËåÉÂõ¥‰∏∫ [0, 100] 
// 
// Related Topics Ë¥™ÂøÉÁÆóÊ≥ï ÈòüÂàó Êï∞ÁªÑ 
// üëç 599 üëé 0


package leetcode.leetcode.editor.cn;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class T621TaskScheduler {
    public static void main(String[] args) {
        Solution solution = new T621TaskScheduler().new Solution();
        char[] tasks={'A','A','A','B','B','B'};
        int n=2;
        System.out.println(solution.leastInterval(tasks, n));
    }

    //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {

        /**
         * Ê†πÊçÆÊï∞ÈáèÊúÄÂ§öÁöÑ‰ªªÂä°ÊéíÂ∫èÔºåÂ∞ÜÊúÄÂ§öÁöÑÂÖ®ÈÉ®ÊîæÂÖ•ÂêéÔºå‰ªªÂä°‰πüÂ∞±ÊîæÂÆå‰∫Ü„ÄÇÈó¥Èöîn‰∏™Ôºå‰∏Ä‰∏™ÂÆåÊï¥ÁöÑÊéíÂ∫èÂ∞±‰∏∫n+1
         * Êï∞ÈáèÊúÄÂ§öÁöÑÊúâÊúâÂá†‰∏™ÁªìÂ∞æÂ∞±ÈúÄË¶ÅÂ§öÂá†‰∏™„ÄÇ
         *
         * ÂêåÊó∂ÊúÄÂ∞è‰∏ç‰ºöÂ∞è‰∫éÊï∞ÁªÑÈïøÂ∫¶
         */
        public int leastInterval(char[] tasks, int n) {
            int max = 0;
            HashMap<Character, Integer> hashMap = new HashMap<>();
            for (char task : tasks) {
                Integer val = hashMap.getOrDefault(task, 0);
                hashMap.put(task, ++val);
                max = Math.max(max, val);
            }
            int maxCount = 0;
            Set<Map.Entry<Character, Integer>> entries = hashMap.entrySet();
            for (Map.Entry<Character, Integer> entry : entries) {
                if (entry.getValue() == max) {
                    ++maxCount;
                }
            }
            return Math.max(tasks.length, (max - 1) * (n + 1) + maxCount);
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}